{"version":3,"file":"proxy-fetch-d9de5c46.js","sources":["../../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/rng.js","../../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/stringify.js","../../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/native.js","../../node_modules/.pnpm/uuid@9.0.0/node_modules/uuid/dist/esm-browser/v4.js","../../src/utils/index.ts","../../src/utils/stream-async-iterable.ts","../../src/utils/encoding.ts","../../src/services/proxy-fetch.ts"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","import { v4 } from 'uuid'\nimport Browser from 'webextension-polyfill'\n\nexport function uuid() {\n  return v4()\n}\n\nexport function getVersion() {\n  return Browser.runtime.getManifest().version\n}\n\nexport function isProduction() {\n  return !import.meta.env.DEV\n}\n","export async function* streamAsyncIterable(stream: ReadableStream) {\n  const reader = stream.getReader()\n  try {\n    while (true) {\n      const { done, value } = await reader.read()\n      if (done) {\n        return\n      }\n      yield value\n    }\n  } finally {\n    reader.releaseLock()\n  }\n}\n","export function string2Uint8Array(str: string): Uint8Array {\n  const encoder = new TextEncoder()\n  return encoder.encode(str)\n}\n\nexport function uint8Array2String(uint8Array: Uint8Array): string {\n  const decoder = new TextDecoder()\n  return decoder.decode(uint8Array)\n}\n","import Browser from 'webextension-polyfill'\nimport {\n  ProxyFetchRequestMessage,\n  ProxyFetchResponseBodyChunkMessage,\n  ProxyFetchResponseMetadataMessage,\n  RequestInitSubset,\n} from '~types/messaging'\nimport { uuid } from '~utils'\nimport { string2Uint8Array, uint8Array2String } from '~utils/encoding'\nimport { streamAsyncIterable } from '~utils/stream-async-iterable'\n\nexport function setupProxyExecutor() {\n  // one port for one fetch request\n  Browser.runtime.onConnect.addListener((port) => {\n    const abortController = new AbortController()\n    port.onDisconnect.addListener(() => {\n      abortController.abort()\n    })\n    port.onMessage.addListener(async (message: ProxyFetchRequestMessage) => {\n      console.debug('proxy fetch', message.url, message.options)\n      const resp = await fetch(message.url, {\n        ...message.options,\n        signal: abortController.signal,\n      })\n      port.postMessage({\n        type: 'PROXY_RESPONSE_METADATA',\n        metadata: {\n          status: resp.status,\n          statusText: resp.statusText,\n          headers: Object.fromEntries(resp.headers.entries()),\n        },\n      } as ProxyFetchResponseMetadataMessage)\n      for await (const chunk of streamAsyncIterable(resp.body!)) {\n        port.postMessage({\n          type: 'PROXY_RESPONSE_BODY_CHUNK',\n          value: uint8Array2String(chunk),\n          done: false,\n        } as ProxyFetchResponseBodyChunkMessage)\n      }\n      port.postMessage({ type: 'PROXY_RESPONSE_BODY_CHUNK', done: true } as ProxyFetchResponseBodyChunkMessage)\n    })\n  })\n}\n\nexport async function proxyFetch(tabId: number, url: string, options?: RequestInitSubset): Promise<Response> {\n  console.debug('proxyFetch', tabId, url, options)\n  return new Promise((resolve) => {\n    const port = Browser.tabs.connect(tabId, { name: uuid() })\n    port.onDisconnect.addListener(() => {\n      throw new DOMException('proxy fetch aborted', 'AbortError')\n    })\n    options?.signal?.addEventListener('abort', () => port.disconnect())\n    const body = new ReadableStream({\n      start(controller) {\n        port.onMessage.addListener(function onMessage(\n          message: ProxyFetchResponseMetadataMessage | ProxyFetchResponseBodyChunkMessage,\n        ) {\n          if (message.type === 'PROXY_RESPONSE_METADATA') {\n            const response = new Response(body, message.metadata)\n            resolve(response)\n          } else if (message.type === 'PROXY_RESPONSE_BODY_CHUNK') {\n            if (message.done) {\n              controller.close()\n              port.onMessage.removeListener(onMessage)\n              port.disconnect()\n            } else {\n              const chunk = string2Uint8Array(message.value)\n              controller.enqueue(chunk)\n            }\n          }\n        })\n        port.postMessage({ url, options } as ProxyFetchRequestMessage)\n      },\n      cancel(_reason: string) {\n        port.disconnect()\n      },\n    })\n  })\n}\n"],"names":["getRandomValues","rnds8","rng","byteToHex","i","unsafeStringify","arr","offset","randomUUID","native","v4","options","buf","rnds","uuid","getVersion","Browser","isProduction","streamAsyncIterable","stream","reader","done","value","string2Uint8Array","str","uint8Array2String","uint8Array","setupProxyExecutor","port","abortController","message","resp","chunk","proxyFetch","tabId","url","resolve","_a","body","controller","onMessage","response","_reason"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}