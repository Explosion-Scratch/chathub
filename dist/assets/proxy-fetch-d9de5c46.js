import{B as u}from"./browser-polyfill-6f7fab7c.js";let a;const E=new Uint8Array(16);function x(){if(!a&&(a=typeof crypto<"u"&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!a))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return a(E)}const t=[];for(let e=0;e<256;++e)t.push((e+256).toString(16).slice(1));function m(e,n=0){return(t[e[n+0]]+t[e[n+1]]+t[e[n+2]]+t[e[n+3]]+"-"+t[e[n+4]]+t[e[n+5]]+"-"+t[e[n+6]]+t[e[n+7]]+"-"+t[e[n+8]]+t[e[n+9]]+"-"+t[e[n+10]]+t[e[n+11]]+t[e[n+12]]+t[e[n+13]]+t[e[n+14]]+t[e[n+15]]).toLowerCase()}const w=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto),l={randomUUID:w};function R(e,n,o){if(l.randomUUID&&!n&&!e)return l.randomUUID();e=e||{};const r=e.random||(e.rng||x)();if(r[6]=r[6]&15|64,r[8]=r[8]&63|128,n){o=o||0;for(let c=0;c<16;++c)n[o+c]=r[c];return n}return m(r)}function h(){return R()}function D(){return u.runtime.getManifest().version}function _(){return!0}async function*O(e){const n=e.getReader();try{for(;;){const{done:o,value:r}=await n.read();if(o)return;yield r}}finally{n.releaseLock()}}function S(e){return new TextEncoder().encode(e)}function U(e){return new TextDecoder().decode(e)}function P(){u.runtime.onConnect.addListener(e=>{const n=new AbortController;e.onDisconnect.addListener(()=>{n.abort()}),e.onMessage.addListener(async o=>{console.debug("proxy fetch",o.url,o.options);const r=await fetch(o.url,{...o.options,signal:n.signal});e.postMessage({type:"PROXY_RESPONSE_METADATA",metadata:{status:r.status,statusText:r.statusText,headers:Object.fromEntries(r.headers.entries())}});for await(const c of O(r.body))e.postMessage({type:"PROXY_RESPONSE_BODY_CHUNK",value:U(c),done:!1});e.postMessage({type:"PROXY_RESPONSE_BODY_CHUNK",done:!0})})})}async function A(e,n,o){return console.debug("proxyFetch",e,n,o),new Promise(r=>{var y;const c=u.tabs.connect(e,{name:h()});c.onDisconnect.addListener(()=>{throw new DOMException("proxy fetch aborted","AbortError")}),(y=o==null?void 0:o.signal)==null||y.addEventListener("abort",()=>c.disconnect());const p=new ReadableStream({start(d){c.onMessage.addListener(function g(s){if(s.type==="PROXY_RESPONSE_METADATA"){const i=new Response(p,s.metadata);r(i)}else if(s.type==="PROXY_RESPONSE_BODY_CHUNK")if(s.done)d.close(),c.onMessage.removeListener(g),c.disconnect();else{const i=S(s.value);d.enqueue(i)}}),c.postMessage({url:n,options:o})},cancel(d){c.disconnect()}})})}export{O as a,D as g,_ as i,A as p,P as s,h as u,R as v};
//# sourceMappingURL=proxy-fetch-d9de5c46.js.map
